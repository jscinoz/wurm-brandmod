defaultTasks "dist"

allprojects {
  group = "so.jscinoz.wurmunlimited.mods"
  version = "0.1.0"
}

subprojects  {
  apply plugin: "java"

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  repositories {
    mavenCentral()
    jcenter()

    maven {
      url "http://gotti.no-ip.org/maven/repository"
    }
  }

  dependencies {
    // Also pulls in the specific version of javassist that will be available at
    // runtime
    compile group: "org.gotti.wurmunlimited", name: "server-modlauncher",
            version: "0.20"
  }

  configurations {
    modRuntime {
      description = "Dependencies needed by mods at runtime that aren't provided"

      // Include everything from the runtime config...
      extendsFrom configurations.runtime

      // ... except the mod launcher (& dependencies) itself
      exclude group: "org.gotti.wurmunlimited"
    }
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs <<
      "-Werror" <<
      "-Xlint:all" <<
      "-Xlint:-processing" <<
      "-Xlint:-options" <<
      // Needed for Javassist
      "-Xlint:-classfile" <<
      "-Xdiags:verbose"
  }

  jar {
    version = null

    manifest {
      attributes(
        "Implementation-Version": project.version
      )
    }
  }
}

def modProjects = subprojects - project(":common");

configure(modProjects) {
  def commonProject = project(":common");

  dependencies {
    compile commonProject
  }

  task dist(type: Zip) {
    dependsOn "jar"

    final modDir = project.name;

    into(modDir) {
      from configurations.modRuntime
      from jar.archivePath
    }

    final modClassPath = (
      // Everything in the common directory (the common.jar itself and any deps)
      configurations.modRuntime.collect { it.name } +
      // Our own jar
      jar.archiveName
    ).join(",")

    from ("${project.projectDir}/src") {
      include "${project.name}.properties"

      // Build the proper classpath entry for the mod
      expand(modClassPath: modClassPath)
    }
  }
}

// Root disk task
task dist(type: Zip) {
  destinationDir = file("${project.buildDir}/distributions");
  baseName = "jscinoz-${project.name}-${project.version}"

  modProjects.each { modProject ->
    dependsOn modProject.dist

    println(modProject.dist.archivePath)

    from (zipTree(modProject.dist.archivePath)) {
      include "**"
    }
  }
}
